### **Updated `StringLinkedList.h`**
#pragma once

#include <iostream>
using namespace std;

#include "StringNode.h"

class StringLinkedList {
public:
    StringLinkedList();             // empty list constructor
    ~StringLinkedList();            // destructor
    bool empty() const;             // is list empty?
    const string& front() const;    // get front element
    void addFront(const string& e); // add to front of list
    void removeFront();             // remove front item
    void display() const;           // display list elements

private:
    StringNode* head;               // pointer to the head of list
};
```

---

### **Updated `StringLinkedList.cpp`**

#include "StringLinkedList.h"

StringLinkedList::StringLinkedList() : head(NULL) { }

StringLinkedList::~StringLinkedList() {
    while (!empty()) removeFront();
}

bool StringLinkedList::empty() const {
    return head == NULL;
}

const string& StringLinkedList::front() const {
    return head->elem;
}

void StringLinkedList::addFront(const string& e) {
    StringNode* v = new StringNode;
    v->elem = e;
    v->next = head;
    head = v;
}

void StringLinkedList::removeFront() {
    StringNode* old = head;
    head = old->next;
    delete old;
}

// ** New display function **
void StringLinkedList::display() const {
    StringNode* current = head;
    while (current != NULL) {
        cout << current->elem << " -> ";
        current = current->next;
    }
    cout << "NULL" << endl;
}
```

---

### **Test Program (`main.cpp`)**
```cpp
#include <iostream>
#include "StringLinkedList.h"

int main() {
    StringLinkedList list;

    list.addFront("World");
    list.addFront("Hello");
    list.addFront("Welcome");
    list.addFront("C++");

    cout << "List elements: ";
    list.display();

    return 0;
}
 ðŸ˜Š
