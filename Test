#include <iostream>
#include <string>
using namespace std;

// Definition of StringNode structure
struct StringNode {
    string elem;          // Element of the node
    StringNode* next;     // Pointer to the next node
};

// Definition of StringLinkedList class
class StringLinkedList {
public:
    StringLinkedList();             // Empty list constructor
    ~StringLinkedList();            // Destructor
    bool empty() const;             // Check if list is empty
    const string& front() const;    // Get front element
    void addFront(const string& e); // Add to front of list
    void removeFront();             // Remove front item
    void display() const;           // Display list elements

private:
    StringNode* head;               // Pointer to the head of list
};

// Constructor
StringLinkedList::StringLinkedList() : head(NULL) { }

// Destructor
StringLinkedList::~StringLinkedList() {
    while (!empty()) removeFront();
}

// Check if list is empty
bool StringLinkedList::empty() const {
    return head == NULL;
}

// Get front element
const string& StringLinkedList::front() const {
    return head->elem;
}

// Add to front of the list
void StringLinkedList::addFront(const string& e) {
    StringNode* v = new StringNode;
    v->elem = e;
    v->next = head;
    head = v;
}

// Remove front item
void StringLinkedList::removeFront() {
    StringNode* old = head;
    head = old->next;
    delete old;
}

// Display list elements
void StringLinkedList::display() const {
    StringNode* current = head;
    while (current != NULL) {
        cout << current->elem << " -> ";
        current = current->next;
    }
    cout << "NULL" << endl;
}

// Test program
int main() {
    StringLinkedList list;

    list.addFront("World");
    list.addFront("Hello");
    list.addFront("Welcome");
    list.addFront("C++");

    cout << "List elements: ";
    list.display();

    return 0;
}
