#include <iostream>
#include <string>
using namespace std;


struct StringNode {
    string elem;          
    StringNode* next;     
};


class StringLinkedList {
public:
    StringLinkedList();             
    ~StringLinkedList();           
    bool empty() const;             
    const string& front() const;    
    void addFront(const string& e); 
    void removeFront();            
    void removeLast();              
    void addBack(const string& e);  
    void display() const;           
    string concatenate() const;     

private:
    StringNode* head;               
};


StringLinkedList::StringLinkedList() : head(NULL) { }


StringLinkedList::~StringLinkedList() {
    while (!empty()) removeFront();
}


bool StringLinkedList::empty() const {
    return head == NULL;
}


const string& StringLinkedList::front() const {
    return head->elem;
}


void StringLinkedList::addFront(const string& e) {
    StringNode* v = new StringNode;
    v->elem = e;
    v->next = head;
    head = v;
}


void StringLinkedList::removeFront() {
    StringNode* old = head;
    head = old->next;
    delete old;
}


void StringLinkedList::removeLast() {
    if (head == NULL) return; 

    
    if (head->next == NULL) {
        delete head;
        head = NULL;
        return;
    }


    StringNode* current = head;
    while (current->next && current->next->next != NULL) {
        current = current->next;
    }

  
    delete current->next;
    current->next = NULL;
}


void StringLinkedList::addBack(const string& e) {
    StringNode* v = new StringNode;
    v->elem = e;
    v->next = NULL;

    if (head == NULL) {  
        head = v;
    }
    else {
    
        StringNode* current = head;
        while (current->next != NULL) {
            current = current->next;
        }
     
        current->next = v;
    }
}


void StringLinkedList::display() const {
    StringNode* current = head;
    while (current != NULL) {
        cout << current->elem << " -> ";
        current = current->next;
    }
    cout << "NULL" << endl;
}


string StringLinkedList::concatenate() const {
    StringNode* current = head;
    string result;

    while (current != NULL) {
        if (!result.empty()) {
            result += " ";  
        }
        result += current->elem;
        current = current->next;
    }
    return result;
}


int main() {
    StringLinkedList list;

   
    list.addFront("World");
    list.addFront("Hello");
    list.addFront("Welcome");
    list.addFront("C++");


    cout << "List elements before adding at the end: ";
    list.display();

    
    list.addBack("Programming");

    
    cout << "List elements after adding 'Programming' at the end: ";
    list.display();

    
    list.removeLast();

    
    cout << "List elements after removing last added element: ";
    list.display();

    
    string result = list.concatenate();
    cout << "Concatenated string: " << result << endl;

    return 0;
}
